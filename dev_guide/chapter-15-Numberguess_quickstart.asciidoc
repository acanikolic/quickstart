[[sid-8094276]]

== Numberguess quickstart

This quickstart shows you how to create and deploy a simple application to JBoss AS; the application does not persist any information. Information is displayed using a JSF view, and business logic is encapsulated in two CDI beans.

 Switch to the quickstarts/numberguess directory and instruct Maven to build and deploy the application: 


----
mvn package jboss-as:deploy
----

 The quickstart uses a Maven plugin to deploy the application. The plugin requires JBoss AS to be running (you can find out how to start the server in <<sid-8094268>> or <<sid-8094269>> ). 

Or you can start the server using an IDE, like Eclipse.

 Now, see if you can determine the most efficient approach to pinpoint the random number at the URL link:$$http://localhost:8080/jboss-as-numberguess$$[] . 


[TIP]
====
Should you wish to undeploy the quickstart, or redeploy after making some changes, it's pretty easy:


*  mvn jboss-as:deploy - deploy any changes to the application to the application server 


*  mvn jboss-as:undeploy - undeploy the example from JBoss AS 


====


It's time to pull the covers back and dive into the internals of the example application.

[[sid-8094276_Numberguessquickstart-DeployingtheNumberguessexampleusingEclipse]]


===Deploying the Numberguess example using Eclipse

 You may choose to deploy the example using Eclipse. You'll need to have JBoss AS started in Eclipse (as described  in <<sid-8094270>> ) and to have imported the quickstarts into Eclipse (as described in <<sid-8094271>> ). 

 With the quickstarts imported, you can deploy the example by right clicking on the jboss-as-numberguess project, and choosing Run As -&gt; Run On Server : 

 
.
image::[]

 

 Make sure the JBoss AS server is selected, and hit Finish : 

 
.
image::[]

 

 You should see JBoss AS start up (unless you already started it in <<sid-8094270>> ) and the application deploy in the Console log: 

 
.
image::[]

 

[[sid-8094276_Numberguessquickstart-Thenumberguessexampleindepth]]


===The numberguess example in depth

In the numberguess application you get 10 attempts to guess a number between 1 and 100. After each attempt, you're told whether your guess was too high or too low.

The numberguess example is comprised of a number of beans, configuration files and Facelets (JSF) views, packaged as a war module. Let's start by examining the configuration files.

 All the configuration files for this example are located in WEB-INF/ , which can be found in the src/main/webapp directory of the example. First, we have the JSF 2.0 version of faces-config.xml . A standardized version of Facelets is the default view handler in JSF 2.0, so there's really nothing that we have to configure. JBoss AS goes above and beyond Java EE here, and will automatically configure JSF for you if you include this file. Thus, the configuration consists of only the root element. 

Code Snippet error: Unable to retrieve the URL: https://github.com/jbossas/quickstart/raw/master/numberguess/src/main/webapp/WEB-INF/faces-config.xml status code: 404.

 There's also an empty beans.xml file, which tells JBoss AS to look for beans in this  application and to activate the CDI. 

 Notice that we don't even need a web.xml ! 

 Let's take a look at the main JSF view, src/main/webapp/home.xhtml . 


[TIP]
====
 JSF uses the .xhtml extension for source files, but serves up the rendered views with the .jsf extension. 


====


Code Snippet error: Unable to retrieve the URL: https://github.com/jbossas/quickstart/raw/master/numberguess/src/main/webapp/home.xhtml status code: 404.

[options="header"]
|===============
|Line number|Note
|20 - 24|There are a number of messages which can be sent to the user, "Higher!" and "Lower!"
|29 - 32|As the user guesses, the range of numbers they can guess gets smaller - this sentence changes to make sure they know the number range of a valid guess.
|38 - 42|This input field is bound to a bean property using a value expression.
|42|A validator binding is used to make sure the user doesn't accidentally input a number outside of the range in which they can guess - if the validator wasn't here, the user might use up a guess on an out of bounds number.
|43 - 45|There must be a way for the user to send their guess to the server. Here we bind to an action method on the bean.

|===============


 The example consists of 4 classes, the first two of which are qualifiers.  First, there is the @Random qualifier, used for injecting a random number: 


[TIP]
====
 A _qualifier_ is used to disambiguate between two beans both of which are eligible for injection based on their type. For more, see the link:$$http://docs.jboss.org/weld/reference/latest/en-US/html/$$[Weld Reference Guide] . 


====


Code Snippet error: Unable to retrieve the URL: https://github.com/jbossas/quickstart/raw/master/numberguess/src/main/java/org/jboss/as/quickstarts/numberguess/Random.java status code: 404.

 There is also the @MaxNumber qualifier, used for injecting the maximum number that can be injected: 

Code Snippet error: Unable to retrieve the URL: https://github.com/jbossas/quickstart/raw/master/numberguess/src/main/java/org/jboss/as/quickstarts/numberguess/MaxNumber.java status code: 404.

 The application-scoped Generator class is responsible for creating the random number, via a producer method. It also exposes the maximum possible number via a producer method: 

Code Snippet error: Unable to retrieve the URL: https://github.com/jbossas/quickstart/raw/master/numberguess/src/main/java/org/jboss/as/quickstarts/numberguess/Generator.java status code: 404.

 The Generator is application scoped, so we don't get a different random each time. 

 The final bean in the application is the session-scoped Game class. This is the primary entry point of the application. It's responsible for setting up or resetting the game, capturing and validating the user's guess and providing feedback to the user with a FacesMessage . We've used the post-construct lifecycle method to initialize the game by retrieving a random number from the @RandomInstance&lt;Integer&gt; bean. 

 You'll notice that we've also added the @Named annotation to this class. This annotation is only required when you want to make the bean accessible to a JSF view via EL (i.e., #{game }). 

Code Snippet error: Unable to retrieve the URL: https://github.com/jbossas/quickstart/raw/master/numberguess/src/main/java/org/jboss/as/quickstarts/numberguess/Game.java status code: 404.

[[sid-8094277]]


===Deploying the Numberguess example using Eclipse

 You may choose to deploy the example using Eclipse. You'll need to have JBoss AS started in Eclipse (as described  in <<sid-8094270>> ) and to have imported the quickstarts into Eclipse (as described in <<sid-8094271>> ). 

 With the quickstarts imported, you can deploy the example by right clicking on the jboss-as-numberguess project, and choosing Run As -&gt; Run On Server : 

 
.
image::[]

 

 Make sure the JBoss AS server is selected, and hit Finish : 

 
.
image::[]

 

 You should see JBoss AS start up (unless you already started it in <<sid-8094270>> ) and the application deploy in the Console log: 

 
.
image::[]

 

[[sid-8094278]]


===The numberguess example in depth

In the numberguess application you get 10 attempts to guess a number between 1 and 100. After each attempt, you're told whether your guess was too high or too low.

The numberguess example is comprised of a number of beans, configuration files and Facelets (JSF) views, packaged as a war module. Let's start by examining the configuration files.

 All the configuration files for this example are located in WEB-INF/ , which can be found in the src/main/webapp directory of the example. First, we have the JSF 2.0 version of faces-config.xml . A standardized version of Facelets is the default view handler in JSF 2.0, so there's really nothing that we have to configure. JBoss AS goes above and beyond Java EE here, and will automatically configure JSF for you if you include this file. Thus, the configuration consists of only the root element. 

Code Snippet error: Unable to retrieve the URL: https://github.com/jbossas/quickstart/raw/master/numberguess/src/main/webapp/WEB-INF/faces-config.xml status code: 404.

 There's also an empty beans.xml file, which tells JBoss AS to look for beans in this  application and to activate the CDI. 

 Notice that we don't even need a web.xml ! 

 Let's take a look at the main JSF view, src/main/webapp/home.xhtml . 


[TIP]
====
 JSF uses the .xhtml extension for source files, but serves up the rendered views with the .jsf extension. 


====


Code Snippet error: Unable to retrieve the URL: https://github.com/jbossas/quickstart/raw/master/numberguess/src/main/webapp/home.xhtml status code: 404.

[options="header"]
|===============
|Line number|Note
|20 - 24|There are a number of messages which can be sent to the user, "Higher!" and "Lower!"
|29 - 32|As the user guesses, the range of numbers they can guess gets smaller - this sentence changes to make sure they know the number range of a valid guess.
|38 - 42|This input field is bound to a bean property using a value expression.
|42|A validator binding is used to make sure the user doesn't accidentally input a number outside of the range in which they can guess - if the validator wasn't here, the user might use up a guess on an out of bounds number.
|43 - 45|There must be a way for the user to send their guess to the server. Here we bind to an action method on the bean.

|===============


 The example consists of 4 classes, the first two of which are qualifiers.  First, there is the @Random qualifier, used for injecting a random number: 


[TIP]
====
 A _qualifier_ is used to disambiguate between two beans both of which are eligible for injection based on their type. For more, see the link:$$http://docs.jboss.org/weld/reference/latest/en-US/html/$$[Weld Reference Guide] . 


====


Code Snippet error: Unable to retrieve the URL: https://github.com/jbossas/quickstart/raw/master/numberguess/src/main/java/org/jboss/as/quickstarts/numberguess/Random.java status code: 404.

 There is also the @MaxNumber qualifier, used for injecting the maximum number that can be injected: 

Code Snippet error: Unable to retrieve the URL: https://github.com/jbossas/quickstart/raw/master/numberguess/src/main/java/org/jboss/as/quickstarts/numberguess/MaxNumber.java status code: 404.

 The application-scoped Generator class is responsible for creating the random number, via a producer method. It also exposes the maximum possible number via a producer method: 

Code Snippet error: Unable to retrieve the URL: https://github.com/jbossas/quickstart/raw/master/numberguess/src/main/java/org/jboss/as/quickstarts/numberguess/Generator.java status code: 404.

 The Generator is application scoped, so we don't get a different random each time. 

 The final bean in the application is the session-scoped Game class. This is the primary entry point of the application. It's responsible for setting up or resetting the game, capturing and validating the user's guess and providing feedback to the user with a FacesMessage . We've used the post-construct lifecycle method to initialize the game by retrieving a random number from the @RandomInstance&lt;Integer&gt; bean. 

 You'll notice that we've also added the @Named annotation to this class. This annotation is only required when you want to make the bean accessible to a JSF view via EL (i.e., #{game }). 

Code Snippet error: Unable to retrieve the URL: https://github.com/jbossas/quickstart/raw/master/numberguess/src/main/java/org/jboss/as/quickstarts/numberguess/Game.java status code: 404.

